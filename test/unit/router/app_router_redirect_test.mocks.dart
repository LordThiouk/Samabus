// Mocks generated by Mockito 5.4.4 from annotations
// in samabus/test/unit/router/app_router_redirect_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:flutter/material.dart' as _i2;
import 'package:go_router/src/state.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:samabus/models/user.dart' as _i6;
import 'package:samabus/providers/auth_provider.dart' as _i3;
import 'package:samabus/providers/auth_status.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueKey_1<T> extends _i1.SmartFake implements _i2.ValueKey<T> {
  _FakeValueKey_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i3.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AuthStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i4.AuthStatus.uninitialized,
      ) as _i4.AuthStatus);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<bool> signUp({
    required String? email,
    required String? password,
    required _i6.UserRole? role,
    String? phone,
    String? fullName,
    String? companyName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
            #role: role,
            #phone: phone,
            #fullName: fullName,
            #companyName: companyName,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> signInWithPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> sendPasswordResetEmail({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [],
          {#email: email},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GoRouterState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGoRouterState extends _i1.Mock implements _i8.GoRouterState {
  MockGoRouterState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  String get matchedLocation => (super.noSuchMethod(
        Invocation.getter(#matchedLocation),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#matchedLocation),
        ),
      ) as String);

  @override
  Map<String, String> get pathParameters => (super.noSuchMethod(
        Invocation.getter(#pathParameters),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  _i2.ValueKey<String> get pageKey => (super.noSuchMethod(
        Invocation.getter(#pageKey),
        returnValue: _FakeValueKey_1<String>(
          this,
          Invocation.getter(#pageKey),
        ),
      ) as _i2.ValueKey<String>);

  @override
  String namedLocation(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, String>? queryParameters = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedLocation,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #namedLocation,
            [name],
            {
              #pathParameters: pathParameters,
              #queryParameters: queryParameters,
            },
          ),
        ),
      ) as String);
}
